'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/posts/redis/redis-interview/','title':"Redis 面试题",'content':"1. Redis 持久化机制 Redis支持持久化的内存数据库, 当Redis重启后通过把硬盘文件重新加载到内存，就能达到恢复数据的目的。\n实现方式：\n单独创建fork()一个子进程，将当前父进程的数据库数据复制到子进程的内存中，然后由子进程写入到临时文件中，持久化的过程结束了，再用这个临时文件替换上次的快照文件，然后子进程退出，内存释放。\nRDB是Redis默认的持久化方式：\n按照一定的时间周期策略把内存的数据以快照的形式保存到硬盘的二进制文件。即Snapshot快照存储，对应产生的数据文件为dump.rdb，通过配置文件中的save参数来定义快照的周期。（ 快照可以是其所表示的数据的一个副本，也可以是数据的一个复制品。）\nAOF：\nRedis会将每一个收到的写命令都通过Write函数追加到文件最后，类似于MySQL的binlog。当Redis重启是会通过重新执行文件中保存的写命令来在内存中重建整个数据库的内容。 当两种方式同时开启时，数据恢复Redis会优先选择AOF恢复。\n2. 缓存雪崩、缓存穿透、缓存预热、缓存更新、缓存降级等问题 1. 缓存雪崩 我们可以简单的理解为：由于原有缓存失效，新缓存未到期间 (例如：我们设置缓存时采用了相同的过期时间，在同一时刻出现大面积的缓存过期)，所有原本应该访问缓存的请求都去查询数据库了，而对数据库CPU和内存造成巨大压力，严重的会造成数据库宕机。从而形成一系列连锁反应，造成整个系统崩溃。 解决办法： 大多数系统设计者考虑用加锁（ 最多的解决方案）或者队列的方式保证来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。还有一个简单方案就时讲缓存失效时间分散开。\n2. 缓存穿透 缓存穿透是指用户查询数据，在数据库没有，自然在缓存中也不会有。这样就导致用户查询的时候，在缓存中找不到，每次都要去数据库再查询一遍，然后返回空（相当于进行了两次无用的查询）。这样请求就绕过缓存直接查数据库，这也是经常提的缓存命中率问题。 解决办法; 最常见的则是采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被这个bitmap拦截掉，从而避免了对底层存储系统的查询压力。 另外也有一个更为简单粗暴的方法，如果一个查询返回的数据为空（不管是数据不存在，还是系统故障），我们仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。通过这个直接设置的默认值存放到缓存，这样第二次到缓冲中获取就有值了，而不会继续访问数据库，这种办法最简单粗暴。 5TB的硬盘上放满了数据，请写一个算法将这些数据进行排重。如果这些数据是一些32bit大小的数据该如何解决？如果是64bit的呢？\n对于空间的利用到达了一种极致，那就是Bitmap和布隆过滤器(Bloom Filter)。 Bitmap： 典型的就是哈希表 缺点是，Bitmap对于每个元素只能记录1bit信息，如果还想完成额外的功能，恐怕只能靠牺牲更多的空间、时间来完成了。\n布隆过滤器（推荐） 就是引入了k(k\u0026gt;1)k(k\u0026gt;1)个相互独立的哈希函数，保证在给定的空间、误判率下，完成元素判重的过程。 它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。 Bloom-Filter算法的核心思想就是利用多个不同的Hash函数来解决“冲突”。 Hash存在一个冲突（碰撞）的问题，用同一个Hash得到的两个URL的值有可能相同。为了减少冲突，我们可以多引入几个Hash，如果通过其中的一个Hash值我们得出某元素不在集合中，那么该元素肯定不在集合中。只有在所有的Hash函数告诉我们该元素在集合中时，才能确定该元素存在于集合中。这便是Bloom-Filter的基本思想。 Bloom-Filter一般用于在大数据量的集合中判定某元素是否存在。\n3. 缓存预热 缓存预热这个应该是一个比较常见的概念，相信很多小伙伴都应该可以很容易的理解，缓存预热就是系统上线后，将相关的缓存数据直接加载到缓存系统。这样就可以避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据！ 解决思路： 1、直接写个缓存刷新页面，上线时手工操作下； 2、数据量不大，可以在项目启动的时候自动进行加载； 3、定时刷新缓存；\n4. 缓存更新 除了缓存服务器自带的缓存失效策略之外（Redis默认的有6中策略可供选择），我们还可以根据具体的业务需求进行自定义的缓存淘汰，常见的策略有两种： （1）定时去清理过期的缓存； （2）当有用户请求过来时，再判断这个请求所用到的缓存是否过期，过期的话就去底层系统得到新数据并更新缓存。 两者各有优劣，第一种的缺点是维护大量缓存的key是比较麻烦的，第二种的缺点就是每次用户请求过来都要判断缓存失效，逻辑相对比较复杂！具体用哪种方案，大家可以根据自己的应用场景来权衡。\n5. 缓存降级 当访问量剧增、服务出现问题（如响应时间慢或不响应）或非核心服务影响到核心流程的性能时，仍然需要保证服务还是可用的，即使是有损服务。系统可以根据一些关键数据进行自动降级，也可以配置开关实现人工降级。 降级的最终目的是保证核心服务可用，即使是有损的。而且有些服务是无法降级的（如加入购物车、结算）。 以参考日志级别设置预案： （1）一般：比如有些服务偶尔因为网络抖动或者服务正在上线而超时，可以自动降级； （2）警告：有些服务在一段时间内成功率有波动（如在95~100%之间），可以自动降级或人工降级，并发送告警； （3）错误：比如可用率低于90%，或者数据库连接池被打爆了，或者访问量突然猛增到系统能承受的最大阀值，此时可以根据情况自动降级或者人工降级； （4）严重错误：比如因为特殊原因数据错误了，此时需要紧急人工降级。\n服务降级的目的，是为了防止Redis服务故障，导致数据库跟着一起发生雪崩问题。因此，对于不重要的缓存数据，可以采取服务降级策略，例如一个比较常见的做法就是，Redis出现问题，不去数据库查询，而是直接返回默认值给用户。\n3. 热点数据和冷数据是什么 热点数据，缓存才有价值 对于冷数据而言，大部分数据可能还没有再次访问到就已经被挤出内存，不仅占用内存，而且价值不大。频繁修改的数据，看情况考虑使用缓存 对于上面两个例子，寿星列表、导航信息都存在一个特点，就是信息修改频率不高，读取通常非常高的场景。 对于热点数据，比如我们的某IM产品，生日祝福模块，当天的寿星列表，缓存以后可能读取数十万次。再举个例子，某导航产品，我们将导航信息，缓存以后可能读取数百万次。 **数据更新前至少读取两次，**缓存才有意义。这个是最基本的策略，如果缓存还没有起作用就失效了，那就没有太大价值了。 那存不存在，修改频率很高，但是又不得不考虑缓存的场景呢？有！比如，这个读取接口对数据库的压力很大，但是又是热点数据，这个时候就需要考虑通过缓存手段，减少数据库的压力，比如我们的某助手产品的，点赞数，收藏数，分享数等是非常典型的热点数据，但是又不断变化，此时就需要将数据同步保存到Redis缓存，减少数据库压力。\n4. Memcache与Redis的区别都有哪些？  存储方式 Memecache把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小。 Redis有部份存在硬盘上，redis可以持久化其数据 数据支持类型 memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型 ，提供list，set，zset，hash等数据结构的存储 使用底层模型不同 它们之间底层实现方式 以及与客户端之间通信的应用协议不一样。 Redis直接自己构建了VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求。 value 值大小不同：Redis 最大可以达到 512M；memcache 只有 1mb。 redis的速度比memcached快很多 Redis支持数据的备份，即master-slave模式的数据备份。  5. 单线程的redis为什么这么快  纯内存操作 单线程操作，避免了频繁的上下文切换 采用了非阻塞I/O多路复用机制  redis的数据类型，以及每种数据类型的使用场景 回答：一共五种 (一)String 这个其实没啥好说的，最常规的set/get操作，value可以是String也可以是数字。一般做一些复杂的计数功能的缓存。 (二)hash 这里value存放的是结构化的对象，比较方便的就是操作其中的某个字段。博主在做单点登录的时候，就是用这种数据结构存储用户信息，以cookieId作为key，设置30分钟为缓存过期时间，能很好的模拟出类似session的效果。 (三)list 使用List的数据结构，可以做简单的消息队列的功能。另外还有一个就是，可以利用lrange命令，做基于redis的分页功能，性能极佳，用户体验好。本人还用一个场景，很合适—取行情信息。就也是个生产者和消费者的场景。LIST可以很好的完成排队，先进先出的原则。 (四)set 因为set堆放的是一堆不重复值的集合。所以可以做全局去重的功能。为什么不用JVM自带的Set进行去重？因为我们的系统一般都是集群部署，使用JVM自带的Set，比较麻烦，难道为了一个做一个全局去重，再起一个公共服务，太麻烦了。 另外，就是利用交集、并集、差集等操作，可以计算共同喜好，全部的喜好，自己独有的喜好等功能。 (五)sorted set sorted set多了一个权重参数score,集合中的元素能够按score进行排列。可以做排行榜应用，取TOP N操作。\n5. Redis 内部结构 dict 本质上是为了解决算法中的查找问题（Searching）是一个用于维护key和value映射关系的数据结构，与很多语言中的Map或dictionary类似。 本质上是为了解决算法中的查找问题（Searching） sds sds就等同于char * 它可以存储任意二进制数据，不能像C语言字符串那样以字符’\\0’来标识字符串的结 束，因此它必然有个长度字段。 skiplist （跳跃表） 跳表是一种实现起来很简单，单层多指针的链表，它查找效率很高，堪比优化过的二叉平衡树，且比平衡树的实现， quicklist ziplist 压缩表 ziplist是一个编码后的列表，是由一系列特殊编码的连续内存块组成的顺序型数据结构， redis的过期策略以及内存淘汰机制 redis采用的是定期删除+惰性删除策略。 为什么不用定时删除策略? 定时删除,用一个定时器来负责监视key,过期则自动删除。虽然内存及时释放，但是十分消耗CPU资源。在大并发请求下，CPU要将时间应用在处理请求，而不是删除key,因此没有采用这一策略. 定期删除+惰性删除是如何工作的呢? 定期删除，redis默认每个100ms检查，是否有过期的key,有过期key则删除。需要说明的是，redis不是每个100ms将所有的key检查一次，而是随机抽取进行检查(如果每隔100ms,全部key进行检查，redis岂不是卡死)。因此，如果只采用定期删除策略，会导致很多key到时间没有删除。 于是，惰性删除派上用场。也就是说在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间那么是否过期了？如果过期了此时就会删除。 采用定期删除+惰性删除就没其他问题了么? 不是的，如果定期删除没删除key。然后你也没即时去请求key，也就是说惰性删除也没生效。这样，redis的内存会越来越高。那么就应该采用内存淘汰机制。 在redis.conf中有一行配置\nmaxmemory-policy volatile-lru 1 该配置就是配内存淘汰策略的(什么，你没配过？好好反省一下自己) volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰 volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰 volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰 allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰 allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰 no-enviction（驱逐）：禁止驱逐数据，新写入操作会报错 ps：如果没有设置 expire 的key, 不满足先决条件(prerequisites); 那么 volatile-lru, volatile-random 和 volatile-ttl 策略的行为, 和 noeviction(不删除) 基本上一致。\nRedis 为什么是单线程的 官方FAQ表示，因为Redis是基于内存的操作，CPU不是Redis的瓶颈，Redis的瓶颈最有可能是机器内存的大小或者网络带宽。既然单线程容易实现，而且CPU不会成为瓶颈，那就顺理成章地采用单线程的方案了（毕竟采用多线程会有很多麻烦！）Redis利用队列技术将并发访问变为串行访问 1）绝大部分请求是纯粹的内存操作（非常快速）2）采用单线程,避免了不必要的上下文切换和竞争条件 3）非阻塞IO优点： 1.速度快，因为数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)\n支持丰富数据类型，支持string，list，set，sorted set，hash 3.支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行 丰富的特性：可用于缓存，消息，按key设置过期时间，过期后将会自动删除如何解决redis的并发竞争key问题  同时有多个子系统去set一个key。这个时候要注意什么呢？ 不推荐使用redis的事务机制。因为我们的生产环境，基本都是redis集群环境，做了数据分片操作。你一个事务中有涉及到多个key操作的时候，这多个key不一定都存储在同一个redis-server上。因此，redis的事务机制，十分鸡肋。 (1)如果对这个key操作，不要求顺序： 准备一个分布式锁，大家去抢锁，抢到锁就做set操作即可 (2)如果对这个key操作，要求顺序： 分布式锁+时间戳。 假设这会系统B先抢到锁，将key1设置为{valueB 3:05}。接下来系统A抢到锁，发现自己的valueA的时间戳早于缓存中的时间戳，那就不做set操作了。以此类推。 (3) 利用队列，将set方法变成串行访问也可以redis遇到高并发，如果保证读写key的一致性 对redis的操作都是具有原子性的,是线程安全的操作,你不用考虑并发问题,redis内部已经帮你处理好并发的问题了。\nRedis 集群方案应该怎么做？都有哪些方案？ 1.twemproxy，大概概念是，它类似于一个代理方式， 使用时在本需要连接 redis 的地方改为连接 twemproxy， 它会以一个代理的身份接收请求并使用一致性 hash 算法，将请求转接到具体 redis，将结果再返回 twemproxy。 缺点： twemproxy 自身单端口实例的压力，使用一致性 hash 后，对 redis 节点数量改变时候的计算值的改变，数据无法自动移动到新的节点。\n2.codis，目前用的最多的集群方案，基本和 twemproxy 一致的效果，但它支持在 节点数量改变情况下，旧节点数据可恢复到新 hash 节点\n3.redis cluster3.0 自带的集群，特点在于他的分布式算法不是一致性 hash，而是 hash 槽的概念，以及自身支持节点设置从节点。具体看官方文档介绍。\n有没有尝试进行多机redis 的部署？如何保证数据一致的？ 主从复制，读写分离 一类是主数据库（master）一类是从数据库（slave），主数据库可以进行读写操作，当发生写操作的时候自动将数据同步到从数据库，而从数据库一般是只读的，并接收主数据库同步过来的数据，一个主数据库可以有多个从数据库，而一个从数据库只能有一个主数据库。\n对于大量的请求怎么样处理 redis是一个单线程程序，也就说同一时刻它只能处理一个客户端请求； redis是通过IO多路复用（select，epoll, kqueue，依据不同的平台，采取不同的实现）来处理多个客户端请求的\nRedis 常见性能问题和解决方案？ (1) Master 最好不要做任何持久化工作，如 RDB 内存快照和 AOF 日志文件 (2) 如果数据比较重要，某个 Slave 开启 AOF 备份数据，策略设置为每秒同步一次 (3) 为了主从复制的速度和连接的稳定性， Master 和 Slave 最好在同一个局域网内 (4) 尽量避免在压力很大的主库上增加从库 (5) 主从复制不要用图状结构，用单向链表结构更为稳定，即： Master \u0026lt;- Slave1 \u0026lt;- Slave2 \u0026lt;- Slave3…\n讲解下Redis线程模型 文件事件处理器包括分别是套接字、 I/O 多路复用程序、 文件事件分派器（dispatcher）、 以及事件处理器。使用 I/O 多路复用程序来同时监听多个套接字， 并根据套接字目前执行的任务来为套接字关联不同的事件处理器。当被监听的套接字准备好执行连接应答（accept）、读取（read）、写入（write）、关闭（close）等操作时， 与操作相对应的文件事件就会产生， 这时文件事件处理器就会调用套接字之前关联好的事件处理器来处理这些事件。 I/O 多路复用程序负责监听多个套接字， 并向文件事件分派器传送那些产生了事件的套接字。 工作原理： 1)I/O 多路复用程序负责监听多个套接字， 并向文件事件分派器传送那些产生了事件的套接字。 尽管多个文件事件可能会并发地出现， 但 I/O 多路复用程序总是会将所有产生事件的套接字都入队到一个队列里面， 然后通过这个队列， 以有序（sequentially）、同步（synchronously）、每次一个套接字的方式向文件事件分派器传送套接字： 当上一个套接字产生的事件被处理完毕之后（该套接字为事件所关联的事件处理器执行完毕）， I/O 多路复用程序才会继续向文件事件分派器传送下一个套接字。如果一个套接字又可读又可写的话， 那么服务器将先读套接字， 后写套接字.\n为什么Redis的操作是原子性的，怎么保证原子性的？ 对于Redis而言，命令的原子性指的是：一个操作的不可以再分，操作要么执行，要么不执行。 Redis的操作之所以是原子性的，是因为Redis是单线程的。 Redis本身提供的所有API都是原子操作，Redis中的事务其实是要保证批量操作的原子性。 多个命令在并发中也是原子性的吗？ 不一定， 将get和set改成单命令操作，incr 。使用Redis的事务，或者使用Redis+Lua==的方式实现.\nRedis事务 Redis事务功能是通过MULTI、EXEC、DISCARD和WATCH 四个原语实现的 Redis会将一个事务中的所有命令序列化，然后按顺序执行。 1.redis 不支持回滚“Redis 在事务失败时不进行回滚，而是继续执行余下的命令”， 所以 Redis 的内部可以保持简单且快速。 2.如果在一个事务中的命令出现错误，那么所有的命令都不会执行； 3.如果在一个事务中出现运行错误，那么正确的命令会被执行。\n1）MULTI命令用于开启一个事务，它总是返回OK。 MULTI执行之后，客户端可以继续向服务器发送任意多条命令，这些命令不会立即被执行，而是被放到一个队列中，当EXEC命令被调用时，所有队列中的命令才会被执行。 2）EXEC：执行所有事务块内的命令。返回事务块内所有命令的返回值，按命令执行的先后顺序排列。 当操作被打断时，返回空值 nil 。 3）通过调用DISCARD，客户端可以清空事务队列，并放弃执行事务， 并且客户端会从事务状态中退出。 4）WATCH 命令可以为 Redis 事务提供 check-and-set （CAS）行为。 可以监控一个或多个键，一旦其中有一个键被修改（或删除），之后的事务就不会执行，监控一直持续到EXEC命令。\nRedis实现分布式锁 Redis为单进程单线程模式，采用队列模式将并发访问变成串行访问，且多客户端对Redis的连接并不存在竞争关系Redis中可以使用SETNX命令实现分布式锁。 将 key 的值设为 value ，当且仅当 key 不存在。 若给定的 key 已经存在，则 SETNX 不做任何动作\n解锁：使用 del key 命令就能释放锁 解决死锁： 1）通过Redis中expire()给锁设定最大持有时间，如果超过，则Redis来帮我们释放锁。 2） 使用 setnx key “当前系统时间+锁持有的时间”和getset key “当前系统时间+锁持有的时间”组合的命令就可以实现。\n"});index.add({'id':1,'href':'/posts/cheatsheet/golang/golang-module-usage/','title':"Golang Module 备忘",'content':"终于，在go1.11 版本中，新增了module管理模块功能，用来管理依赖包。\n文章包你\n一招鲜，走天下\n开启环境变量\nexport GO111MODULE=on 操作 初始化 go mod init mytest 添加/删除依赖 自动根据 go 文件中的import 添加或者删除依赖\ngo mod tidy "});index.add({'id':2,'href':'/posts/mysql/mysql-intro/','title':"Mysql 介绍",'content':"todo\n"});index.add({'id':3,'href':'/posts/redis/redis-intro/','title':"Redis 介绍",'content':"本文从初步了解、面向开发、面向运维这三个方面对Redis进行简单介绍\n初步了解  Redis是开放源代码（BSD许可）的内存中数据结构存储，用作数据库，缓存和消息代理。 自带主从，Lua脚本支持，LRU过期策略，事务和不同级别的磁盘持久性，\n并通过Redis Sentinel和Redis Cluster自动分区实现高可用。\nRedis 作为 NoSql 不会将数据存储在定义表，行和列的定义明确的数据库模式中，而是直接存储在 数据结构中，非常灵活。 但是也可以是有 Module 实现 sqlite 功能，rediSQL。\n基础设计   Redis 是单进程单线程：好处是  代码更清晰，处理逻辑更简单 不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗 不存在多进程或者多线程导致的切换而消耗CPU 缺点是：无法发挥多核CPU性能，不过可以通过在单机开多个Redis实例来完善； Redis 6.0 使用了多线程使得性能得到2倍提升   Redis 数据存储在内存，数据量不能大于硬件内存 多路 I/O 复用模型:  这里“多路”指的是多个网络连接，“复用”指的是复用同一个线程。 采用多路 I/O 复用技术可以让单个线程高效的处理多个连接请求（尽量减少网络IO的时间消耗）   Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，  fork 一个线程后台 重启的时候可以再次加载进行使用   Redis支持数据的备份，配置主从即可  优缺点   性能极高 – Redis 能读的速度是 110000 次/s,写的速度是 81000 次/s 原子操作，多个操作支持事务 Redis的主要缺点是数据库容量受到物理内存的限制，不能用作海量数据的高性能读写，因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上 无法发挥多核CPU的性能，开多个实例  面向开发 数据类型 支持多种数据类型，详见文章Redis数据类型和应用场景\n数据过期 事务 单个操作是原子的，为了使多个任务成为原子操作，需要使用事务 详见文章 Redis事务\n管道技术 Redis是一种基于客户端-服务端模型以及请求/响应协议的TCP服务。这意味着通常情况下一个请求会遵循以下步骤：\n客户端向服务端发送一个查询请求，并监听Socket返回，通常是以阻塞模式，等待服务端响应。\n服务端处理命令，并将结果返回给客户端。\n详见文章 Redis管道技术\n面向运维 安全 分布式 主从 持久化、备份和恢复 性能测试"});index.add({'id':4,'href':'/docs/example/','title':"Example Site",'content':"Introduction Ferre hinnitibus erat accipitrem dixi Troiae tollens Lorem markdownum, a quoque nutu est quodcumque mandasset veluti. Passim inportuna totidemque nympha fert; repetens pendent, poenarum guttura sed vacet non, mortali undas. Omnis pharetramque gramen portentificisque membris servatum novabis fallit de nubibus atque silvas mihi. Dixit repetitaque Quid; verrit longa; sententia mandat quascumque nescio solebat litore; noctes. Hostem haerentem circuit plenaque tamen.\n Pedum ne indigenae finire invergens carpebat Velit posses summoque De fumos illa foret  Est simul fameque tauri qua ad Locum nullus nisi vomentes. Ab Persea sermone vela, miratur aratro; eandem Argolicas gener.\nMe sol Nec dis certa fuit socer, Nonacria dies manet tacitaque sibi? Sucis est iactata Castrumque iudex, et iactato quoque terraeque es tandem et maternos vittis. Lumina litus bene poenamque animos callem ne tuas in leones illam dea cadunt genus, et pleno nunc in quod. Anumque crescentesque sanguinis progenies nuribus rustica tinguet. Pater omnes liquido creditis noctem.\nif (mirrored(icmp_dvd_pim, 3, smbMirroredHard) != lion(clickImportQueue, viralItunesBalancing, bankruptcy_file_pptp)) { file += ip_cybercrime_suffix; } if (runtimeSmartRom == netMarketingWord) { virusBalancingWin *= scriptPromptBespoke + raster(post_drive, windowsSli); cd = address_hertz_trojan; soap_ccd.pcbServerGigahertz(asp_hardware_isa, offlinePeopleware, nui); } else { megabyte.api = modem_flowchart - web + syntaxHalftoneAddress; } if (3 \u0026lt; mebibyteNetworkAnimated) { pharming_regular_error *= jsp_ribbon + algorithm * recycleMediaKindle( dvrSyntax, cdma); adf_sla *= hoverCropDrive; templateNtfs = -1 - vertical; } else { expressionCompressionVariable.bootMulti = white_eup_javascript( table_suffix); guidPpiPram.tracerouteLinux += rtfTerabyteQuicktime(1, managementRosetta(webcamActivex), 740874); } var virusTweetSsl = nullGigo;  Trepident sitimque Sentiet et ferali errorem fessam, coercet superbus, Ascaniumque in pennis mediis; dolor? Vidit imi Aeacon perfida propositos adde, tua Somni Fluctibus errante lustrat non.\nTamen inde, vos videt e flammis Scythica parantem rupisque pectora umbras. Haec ficta canistris repercusso simul ego aris Dixit! Esse Fama trepidare hunc crescendo vigor ululasse vertice exspatiantur celer tepidique petita aversata oculis iussa est me ferro.\n"});index.add({'id':5,'href':'/docs/example/table-of-contents/with-toc/','title':"With ToC",'content':"Caput vino delphine in tamen vias Cognita laeva illo fracta Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.\n Te at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit  Natus quaerere Pectora et sine mulcere, coniuge dum tincta incurvae. Quis iam; est dextra Peneosque, metuis a verba, primo. Illa sed colloque suis: magno: gramen, aera excutiunt concipit.\n Phrygiae petendo suisque extimuit, super, pars quod audet! Turba negarem. Fuerat attonitus; et dextra retinet sidera ulnas undas instimulat vacuae generis? Agnus dabat et ignotis dextera, sic tibi pacis feriente at mora euhoeque comites hostem vestras Phineus. Vultuque sanguine dominoque metuit risi fama vergit summaque meus clarissimus artesque tinguebat successor nominis cervice caelicolae.\n Limitibus misere sit Aurea non fata repertis praerupit feruntur simul, meae hosti lentaque citius levibus, cum sede dixit, Phaethon texta. Albentibus summos multifidasque iungitur loquendi an pectore, mihi ursaque omnia adfata, aeno parvumque in animi perlucentes. Epytus agis ait vixque clamat ornum adversam spondet, quid sceptra ipsum est. Reseret nec; saeva suo passu debentia linguam terga et aures et cervix de ubera. Coercet gelidumque manus, doluit volvitur induta?\nEnim sua Iuvenilior filia inlustre templa quidem herbis permittat trahens huic. In cruribus proceres sole crescitque fata, quos quos; merui maris se non tamen in, mea.\nGermana aves pignus tecta Mortalia rudibusque caelum cognosceret tantum aquis redito felicior texit, nec, aris parvo acre. Me parum contulerant multi tenentem, gratissime suis; vultum tu occupat deficeret corpora, sonum. E Actaea inplevit Phinea concepit nomenque potest sanguine captam nulla et, in duxisses campis non; mercede. Dicere cur Leucothoen obitum?\nPostibus mittam est nubibus principium pluma, exsecratur facta et. Iunge Mnemonidas pallamque pars; vere restitit alis flumina quae quoque, est ignara infestus Pyrrha. Di ducis terris maculatum At sede praemia manes nullaque!\n"});index.add({'id':6,'href':'/docs/example/table-of-contents/without-toc/','title':"Without ToC",'content':"At me ipso nepotibus nunc celebratior genus Tanto oblite Lorem markdownum pectora novis patenti igne sua opus aurae feras materiaque illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat admonitu concidit, ad resimas vultus et rugas vultu dignamque Siphnon.\nQuam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt dixit: ritu pharetramque. Exul Laurenti orantem modo, per densum missisque labor manibus non colla unum, obiectat. Tu pervia collo, fessus quae Cretenque Myconon crate! Tegumenque quae invisi sudore per vocari quaque plus ventis fluidos. Nodo perque, fugisse pectora sorores.\nSumme promissa supple vadit lenius Quibus largis latebris aethera versato est, ait sentiat faciemque. Aequata alis nec Caeneus exululat inclite corpus est, ire tibi ostendens et tibi. Rigent et vires dique possent lumina; eadem dixit poma funeribus paret et felix reddebant ventis utile lignum.\n Remansit notam Stygia feroxque Et dabit materna Vipereas Phrygiaeque umbram sollicito cruore conlucere suus Quarum Elis corniger Nec ieiunia dixit  Vertitur mos ortu ramosam contudit dumque; placabat ac lumen. Coniunx Amoris spatium poenamque cavernis Thebae Pleiadasque ponunt, rapiare cum quae parum nimium rima.\nQuidem resupinus inducto solebat una facinus quae Credulitas iniqua praepetibus paruit prospexit, voce poena, sub rupit sinuatur, quin suum ventorumque arcadiae priori. Soporiferam erat formamque, fecit, invergens, nymphae mutat fessas ait finge.\n Baculum mandataque ne addere capiti violentior Altera duas quam hoc ille tenues inquit Sicula sidereus latrantis domoque ratae polluit comites Possit oro clausura namque se nunc iuvenisque Faciem posuit Quodque cum ponunt novercae nata vestrae aratra  Ite extrema Phrygiis, patre dentibus, tonso perculit, enim blanda, manibus fide quos caput armis, posse! Nocendo fas Alcyonae lacertis structa ferarum manus fulmen dubius, saxa caelum effuge extremis fixum tumor adfecit bella, potentes? Dum nec insidiosa tempora tegit spirarunt. Per lupi pars foliis, porreximus humum negant sunt subposuere Sidone steterant auro. Memoraverit sine: ferrum idem Orion caelum heres gerebat fixis?\n"});index.add({'id':7,'href':'/posts/redis/redis-data-types/','title':"Redis 数据类型与适用场景",'content':"redis 常被拿来与 memcached 来比较，但非常不通的地方就在于 Redis 有非常出色的数据结构，使用非常简便。 本文介绍常用的数据类型和使用场景 Strings Lists Hashes Sets Sorted-Sets 等。\n数据类型 Strings 字符串是Redis值中最基本的一种。 Redis字符串是二进制安全的，这意味着Redis字符串可以包含任何类型的数据，例如JPEG图像或序列化的Ruby对象。\n字符串值的最大长度为512 MB。\n使用场景：\n 使用INCR系列中的命令将字符串用作原子计数器：INCR，DECR，INCRBY。 使用APPEND命令附加到字符串。 使用字符串作为带有GETRANGE和SETRANGE的随机访问向量。 在很小的空间内编码大量数据，或使用GETBIT和SETBIT创建Redis支持的Bloom Filter。 会话缓存：许多网站利用Redis字符串创建会话缓存，以通过缓存HTML片段或页面来加快其网站体验。由于数据是临时存储在RAM中的，因此此属性使Redis成为会话缓存的理想选择。它能够临时存储特定于用户的数据，例如在线商店中购物车中存储的项目，这一点至关重要，因为您的用户在注销或失去连接时不会丢失其数据。PHP的缓存甚至可以直接在配置文件中指定存储到redis。  Lists Redis列表只是字符串列表，按插入顺序排序。可以将元素添加到Redis列表中，从而将新元素推到列表的顶部（左侧）或结尾（右侧）。\n最大支持 2^32 - 1 个元素， 4294967295 40亿\n使用场景：\n 在社交网络中对时间轴建模，请使用LPUSH以便在用户时间轴中添加新元素，并使用LRANGE来检索一些最近插入的项目 可以将LPUSH与LTRIM一起使用，以创建一个列表，该列表从不超过给定数量的元素，而只记住最新的N个元素 列表可以用作消息传递，用作跨系统的数据载体 可以使用列表做更多的事情，此数据类型支持许多命令，包括阻塞命令，例如BLPOP  Sets Redis集是字符串的无序集合。添加，删除和测试成员的存在 O(1) 复杂度。（恒定时间，与Set中包含的元素数量无关）。\nRedis集具有不允许重复成员的理想属性。多次添加同一元素将导致集合具有该元素的单个副本。实际上，这意味着添加成员不需要检查是否存在，然后进行添加操作。\n可以在很短的时间内完成集的相交，交集，差集。\n最大支持 2^32 - 1 个元素， 4294967295 40亿\n使用场景：\n 使用Redis集来跟踪独特的事物， 比如UV，根据IP去重。想知道访问给定博客帖子的所有唯一IP地址吗？每次处理页面视图时，只需使用SADD。您确定不会插入重复的IP。 Redis Set 很好地表示关系。您可以使用Set代表每个标签，使用Redis创建标签系统。然后，可以使用SADD命令将具有给定标签的所有对象的所有ID添加到代表该特定标签的Set中。您是否希望所有对象的所有ID同时具有三个不同的标签？只需使用SINTER。 您可以使用 Set 使用 SPOP 或 SRANDMEMBER 命令随机提取元素。  Hashes Redis Hashes 是字符串字段和字符串值之间的映射，因此它们是表示对象的理想数据类型（例如，具有多个字段（例如名称，姓氏，年龄等）的User）：\n@cli HMSET user:1000 username antirez password P1pp0 age 34 HGETALL user:1000 HSET user:1000 password 12345 HGETALL user:1000  具有几个字段（官方建议大概最多一百个左右）的散列以占用很少空间的方式存储，因此您可以在小型Redis实例中存储数百万个对象。\n尽管哈希主要用于表示对象，但是它们能够存储许多元素，因此您也可以将哈希用于许多其他任务。\n每个哈希最多可以存储2 ^ 32-1个字段-值对（超过40亿个）\n使用场景：\n 缓存用户信息 可以相似的多个 String 用 Hashes 汇集在一起  Sorted sets 与Redis集类似，Redis排序集是非重复的String集合。区别在于，排序集的每个成员都与Score相关联，该得分用于从最小到最大得分中获取排序的排序集。虽然成员是唯一的，但分数可能会重复。\n使用排序集，您可以非常快速地添加 O(log(N))，删除 O(M*log(N)) 或更新元素（时间与元素数量的对数成正比）。\n由于元素是按顺序排序的，因此可以非常快速地按分数或按排名（位置）获得范围。\n访问排序集的中间位置也非常快，因此您可以将排序集用作非重复元素的智能列表，\n从中可以快速访问所需的所有内容：元素的顺序，快速检测元素是否存在，对中间元素的快速访问。\n简而言之，使用Sorted Sets，可以执行许多性能出色的任务，而这些任务实际上很难在其他类型的数据库中建模。\n比如：\n  积分排行版，使用 ZADD 来更新元素的分值， ZRANGE 来获取范围分值的数据，ZRANK 查找排行，时间复杂度都是 O(log(N)+M) ,速度很快\n  Sorted Sets 通常用于索引Redis中存储的数据。例如，如果您有许多代表用户的哈希，则可以使用已排序的集合，其元素具有用户的年龄作为得分，而用户的ID作为值。因此，使用ZRANGEBYSCORE检索具有给定年龄段的所有用户将非常简单快捷。\n  Sorted Set 还可用作为延迟队列，使用 时间戳 作为score， ZRANGEBYSCORE 来查找符合时间范围的数据，并且再消费完成以后，使用 ZREMRANGEBYSCORE 来删除这部分数据\n  Bitmaps Bitmaps and HyperLogLogs 实际上是基于 String 类型，但是他们有自己的语意\nBitmaps 支持如下几个操作：\nBITCOUNT BITFIELD BITOP BITPOS GETBIT and SETBIT\nBitmaps 是某些类型信息的非常节省空间的表示形式。 一个示例是需要用户访问历史的Web应用程序，因此例如可以确定哪些用户是beta功能的良好目标。\n使用场景：\n 制作快速，简便，实时的指标 每日活跃用户，每日一个key，根据用户ID对 redis key 的偏移位进行置1，   HyperLogLogs Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。\n类似 set 计算值基数集的数量，但是不能返回具体的元素。\n一边 ADD 一边计算， 所以在使用 PFCOUNT 的时候，只是取一个值，并未进行计算所以复杂度是 O(1)\n当用单个键调用PFCOUNT时，即使在理论上处理密集型HyperLogLog的恒定时间很高，性能也很出色。这是可能的，因为PFCOUNT使用缓存来记住先前计算的基数，这种变化很少改变，因为大多数PFADD操作不会更新任何寄存器。每秒可能进行数百次操作。\n当使用多个键调用PFCOUNT时，会执行HyperLogLogs的即时合并，这很慢，而且无法缓存联合的基数，因此当与多个键一起使用时，PFCOUNT可能会花费一些时间。一个毫秒级的数量级，不应滥用。\n用户应记住，PFCOUNT 命令的单key和多keys执行在语义上是不同的，并且具有不同的性能。\n更多数据类型的用法请前往官网查看更多消息 https://redis.io/commands\n"});index.add({'id':8,'href':'/posts/redis/redis-version/','title':"Redis 版本信息",'content':"本文介绍 Redis发布周期, 版本兼容和版本特性说明\nRedis发布周期 Redis 作为系统软件，被各个系统广泛使用，升级会有一定成本，因此发布周期都比较长。\n unstable development frozen release candidate stable  版本兼容 Redis 尽量向后兼容，比如 2.8 通常向 2.6.x 兼容， 跨版本 2.4 则可能有问题。\n在主从配置中，虽然建议是 主从都是用相同的redis 版本， 但是实际使用中， 低版本的的主 2.6 通常可以接上 高版本的从 2.8;\n而高版本的主2.8 接上 低版本的从 2.6 可能有问题。\n版本说明 Redis 6.0 Redis 6在许多关键领域改进了Redis，并且是最大的领域之一，在此仅列出此版本的最大功能：\n 模块系统现在允许开发者使用新API，比如:\n将任意模块私有数据存储在RDB文件中，处理不同服务器事件，捕获和重写命令执行，阻止客户端key等 Redis重写了过期key的周期，可更快地收回过期key Redis全面支持SSL\nRedis现在在所有通道上都支持SSL 支持ACL\n可以指定某些用户只能运行某些命令或者访问某些数据结构 Redis提供了名为RESP3的新协议，该协议可返回更多语义答复\n客户端可以得到更明确的返回类型，客户端需要更新以支持此协议 服务器端支持键值的客户端缓存。\n这个该功能仍处于试验阶段，接下来的版本会有新的迭代，更多信息 https://redis.io/topics/client-side-caching Redis现在可以选择使用多线程来处理I/O，（最大128个线程）\n在单个实例中，每秒能共提供2倍的操作，但 pipeline 无法使用此功能 无硬盘复制现在支持从库，\nRedis版本2.8.18是支持无盘复制的第一个版本，支持主库直接同步， 现在则支持子进程直接在从库将RDB通过线路发送到从属设备，而不使用磁盘作为中间存储 Redis-benchmark 现在开始支持 Redis Cluster 模式 SRANDMEMBER 和其他相似的命令，有更好的随机性 改进了 Redis-cli 客户端 重写了 Systemd support 发布了 Redis Cluster 的代理服务\nhttps://github.com/artix75/redis-cluster-proxy 发布了 新的Redis module ： Disque，内存中的分布式作业队列\nhttps://github.com/antirez/disque-module  Redis 5.0 Redis 5是专注于一些重要功能的发行版。 而Redis 4非常专注于操作，\nRedis 5的更改大部分是面向用户的，在现有数据基础上实施新的数据类型和操作类型。 以下是此版本的主要功能：\n 支持 Stream 类型. https://redis.io/topics/streams-intro 增加 Redis Module API：计时器，集群和字典 API RDB 存储 LFU and LRU 信息 将集群管理器从Ruby（redis-trib.rb）由C改写，redis-cli --cluster help 查询更多帮助信息 sorted set 增加新操作命令: ZPOPMIN/ZPOPMAX （ blocking variants todo 未知） 升级碎片整理 version 2 HyperLogLog 优化底层实现 更好的内存报告功能。 子命令支持 HELP client 终端经常连接和断开会有更好的性能体现 修复若干bug，随机功能的性能提升 内存管理 Jemalloc 升级版本到 5.1 CLIENT UNBLOCK and CLIENT ID 添加 LOLWUT 功能（计算机美学，实际开发可能用不上） http://antirez.com/news/123 如果不是为了向后API兼容，Redis将不再使用“slave”一词 网络层中的Differnet优化 Lua的改进：  更好地将Lua脚本传输到 Slave(从库) / AOF(AOF追加操作落地) Lua脚本现在可以超时，并且处于BUSY状态的从库也支持   动态HZ，以平衡空闲CPU使用率和响应速度，\nhz理解为后台任务占用cpu资源 Redis核心在许多方面得到了重构和改进  Redis 4.0 Redis 3.2 Redis 3.0 Redis 2.8   现在，从站可以与主站部分重新同步，因此大多数情况下，当短短时间断开主从链接时，不需要与主端RDB创建完全重新同步\n  支持 IPv6 （实验性功能）\n  从站现在可以显式ping主机，主机可以独立检测超时的从站\n  可以设置如果没有连接足够多具有给定最大延迟的从站，则主站可以停止接受写操作\n  键空间通过发布/订阅更改通\n  CONFIG SET maxclients 现在可使用命令设置最大连接数\n  可以绑定多个ip地址\n  设置 进程\n  设置进程名称，以便您可以在“ ps”命令输出中识别实例的侦听端口，或者该实例是正在保存的子实例\n  崩溃时自动检查内存\n  CONFIG REWRITE可以将使用CONFIG SET操作的配置更改具体化到redis.conf文件中\n  NetBSD 更友好的代码库\n  PUBSUB命令用于发布/订阅自省功能， 列出相关信息，\n  现在可以照原样复制 EVALSHA，而无需为复制链接扩展到完整的EVAL LUA脚本(??)\n  更好的Lua脚本错误报告\n  SDIFF性能提升\n  实验特性： 无盘复制 http://redis.io/topics/replication\n  增加 SCAN, SSCAN, HSCAN, ZSCAN 命令\n  AOF 如果硬盘不够，则不会 异常退出，并且在硬盘足够的情况下，能够继续正常工作\n  增加 BITPOS: find first bit set or clear in a bitmap.\n  Redis-cli更新为使用SCAN而不是通过以下方式RANDOMKEY 进行随机采样\n  提升6倍 info 的速度\n  Jemalloc updated to 3.6.0\n  截断的 AOF 也可以重新加载\n  Redis 2.6  服务器端支持Lua脚本，请参阅http://redis.io/commands/eval 虚拟内存已删除（在2.4中已弃用） 删除了最大客户端数的硬编码限制， AOF低级语义通常更为理智，尤其是在使用 Slaves 增加毫秒级的过期策略，相关命令为 PEXPIRE, PTTL lists, ziplists hashes 小规模使用该类数据结构存储小数字，可以更好的利用内存 从库支持只读功能 新的 BIT 操作：BITCOUNT 和 BITOP 客户端最大输出缓冲区的软硬限制。您可以为不同类别的客户端（普通，pubsub，从库）指定不同的限制 更多增量（较少阻塞）的过期密钥收集算法，实际上，这意味着当大量密钥大约同时过期时，Redis的响应速度更快。 AOF 能够使用可变参数命令重写聚合数据类型，通常可以生成一个更易于保存，加载且尺寸更小的AOF 现在，每个redis.conf指令都可以作为redis-server二进制文件的命令行选项使用，并且具有相同的名称和参数数量。 散列表种子随机化，以防止冲突攻击。 将大型对象写入Redis时，性能得到改善 集成内存测试，请参阅redis-server \u0026ndash;test-memory 新增 INCRBYFLOAT and HINCRBYFLOAT 命令 新的DUMP，RESTORE，MIGRATE命令（从Redis Cluster移植回2.6） RDB文件中的CRC64 Checksump MONITOR 有更好的输出和行为（现在在执行之前已记录命令） Watchdog “看门狗”可调试延迟，慢日志等 CONFIG SET watchdog-period 500 重构或重写了核心的重要部分。新的内部API和核心更改允许在新代码的基础上开发Redis Cluster，但是对于2.6，所有集群代码均已删除，并且将在Redis 3.0更加完整和稳定时与Redis 3.0一起发布。 Redis 启动画面增加 ASCII logo 关于内存违规或失败的断言的崩溃报告得到了显着改进，从而使难以捕获的错误的调试更加简单。 redis-benchmark 提升: 能够运行选定的测试，CSV输出，更快，更好的帮助 redis-cli改进：\u0026ndash;eval用于舒适地开发Lua脚本 SHUTDOWN 现在支持两个可选参数：“SAVE”和“ NOSAVE” INFO输出分为多个部分，该命令现在仅能显示特定的部分 有关命令被调用多少时间以及使用了多少执行时间的新统计信息: info commandstats 在边缘情况下更可预测的SORT行为。 更好地支持大字节序和*BSD系统 改进了构建系统 "});index.add({'id':9,'href':'/posts/redis/redis-replication/','title':"Redis 主从复制",'content':"Redis 主从复制 主服复制功能，断开的话，从库会自动重新连接到从库。\n以下操作将会同步到从库\n 客户端写入数据，key过期或者强制删除数据任何其他更改主数据集的操作 当主服务器和副本服务器之间的链接断开时，由于网络问题或由于在主服务器或副本服务器中检测到超时，副本服务器将重新连接并尝试进行部分重新同步 如果无法进行部分重新同步，则副本将要求完全重新同步。这将涉及一个更复杂的过程，在该过程中，主服务器需要创建其所有数据的快照，将其发送到副本，然后在数据集更改时继续发送命令流。  默认情况下，主从复制是异步复制，（低延迟和高性能），可以支持同步复制，Sentinel或Redis Cluster 有更多高可用性和故障转移的信息。\n本文继续基本主从复制基本特征。\n Redis使用异步复制。 一个 Master可以有多个 Slave 。 Slave 支持级联， 所有的 Slave 将从 Master 获取相同的数据流。 非阻塞主从复制，同步的同时 Master 支持查询。 复制的同时 Slave 也基本上没有阻塞。\n执行初始同步时，Slave 可以使用旧版数据处理查询。否则，您可以配置Redis副本以在复制流关闭时将错误返回给客户端。 但是，在初始同步之后，必须删除旧的数据集，并且必须加载新的数据集。副本将在此短暂的窗口内阻止传入的连接（对于非常大的数据集，该连接可能长达数秒）。从Redis 4.0开始，可以对Redis进行配置，以在其他线程删除旧数据，但是加载新的初始数据集仍将在主线程中进行，并会阻塞 Slave。 主从复制可以用于可伸缩性，也可以用于只读查询的多个副本（例如，可以将慢速O（N）操作放在Slave），也可以只用作备份，用于提高数据安全性和高可用性，Slave 可以随之提升为 Master 主从复制有一个非常有用的用法：Master 关闭落盘逻辑，仅仅让Slave落盘，规避落盘带来的性能降低\nRDB数据大的时候容易出现问题，AOF是同步也会有性能\n但是，必须小心处理此设置，下面会讲，因为重新启动的 Master 将以空数据集开始：如果副本尝试与其同步，则副本也将被清空。  强烈建Master设置持久化  Master Redis 不能设置机器启动以后自动启动实例，可能导致以空数据启动导致所有的从都丢失数据   Redis复制如何工作 每个Master 都一个 ID，是一个较大的伪随机字符串，offset 表示复制流的偏移量（哪怕没有从库） Replication ID, offset\n\u0026gt;info Replication ole:master connected_slaves:0 master_replid:c4de5c0813d5d3aaf4f56b3d81c4edcd27824d7c master_replid2:0000000000000000000000000000000000000000 master_repl_offset:0 second_repl_offset:-1 repl_backlog_active:0 repl_backlog_size:1048576 repl_backlog_first_byte_offset:0 repl_backlog_histlen:0  确认Master id 和 offset 使用 PSYNC 发送旧的replid到最新的增量数据到 Slave  master 保存所有数据到 RDB 文件，并且开始缓存新到的命名数据流 传输 RDB 文件到 slave， 并且加载到内存 开始传输 之前缓存的命令数据流     如之前所说，主从复制断开是可以自动恢复的； 一主多从，只会执行一次 RDB 文件落盘；  连接到新提升的Master服务器的副本不必执行完全同步。\n无盘复制 通常，完全重新同步需要在磁盘上创建RDB文件，然后从磁盘重新加载相同的RDB，以便为副本提供数据。\n对于慢速磁盘，这对于Master而言可能是非常耗时的操作。 Redis 2.8.18版是第一个支持无盘复制的版本。 在此设置中，子进程直接通过线路将RDB发送到副本，而无需使用磁盘作为中间存储。\n配置主从 要配置基本的Redis复制很简单：只需将以下行添加到副本配置文件中：\nreplicaof 192.168.1.1 6379 配置只读 "});index.add({'id':10,'href':'/posts/redis/redis-transaction/','title':"Redis 事务",'content':"Redis 事务 Redis 事务可以一次执行多个命令， 并且带有以下两个重要的保证：\n 事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。 事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。  一个事务从开始到执行会经历以下三个阶段：\n 开始事务。 命令入队。 执行事务。   实例 以下是一个事务的例子， 它先以 MULTI 开始一个事务， 然后将多个命令入队到事务中， 最后由 EXEC 命令触发事务， 一并执行事务中的所有命令：\nredis 127.0.0.1:6379\u0026gt; MULTI OK redis 127.0.0.1:6379\u0026gt; SET book-name \u0026quot;Mastering C++ in 21 days\u0026quot; QUEUED redis 127.0.0.1:6379\u0026gt; GET book-name QUEUED redis 127.0.0.1:6379\u0026gt; SADD tag \u0026quot;C++\u0026quot; \u0026quot;Programming\u0026quot; \u0026quot;Mastering Series\u0026quot; QUEUED redis 127.0.0.1:6379\u0026gt; SMEMBERS tag QUEUED redis 127.0.0.1:6379\u0026gt; EXEC 1) OK 2) \u0026quot;Mastering C++ in 21 days\u0026quot; 3) (integer) 3 4) 1) \u0026quot;Mastering Series\u0026quot; 2) \u0026quot;C++\u0026quot; 3) \u0026quot;Programming\u0026quot;  Redis 事务命令 下表列出了 redis 事务的相关命令：\n   序号 命令及描述     1 DISCARD 取消事务，放弃执行事务块内的所有命令。   2 EXEC 执行所有事务块内的命令。   3 MULTI 标记一个事务块的开始。   4 UNWATCH 取消 WATCH 命令对所有 key 的监视。   5 WATCH key [key \u0026hellip;] 监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。   "});index.add({'id':11,'href':'/posts/redis/redis-pipelined/','title':"Redis pipelined 管道",'content':"Redis pipelined 管道 Redis是一种基于客户端-服务端模型以及请求/响应协议的TCP服务。这意味着通常情况下一个请求会遵循以下步骤：\n 客户端向服务端发送一个查询请求，并监听Socket返回，通常是以阻塞模式，等待服务端响应。 服务端处理命令，并将结果返回给客户端。   Redis 管道技术 Redis 管道技术可以在服务端未响应时，客户端可以继续向服务端发送请求，并最终一次性读取所有服务端的响应。\n实例 查看 redis 管道，只需要启动 redis 实例并输入以下命令：\n$(echo -en \u0026quot;PING\\r\\n SET w3ckey redis\\r\\nGET w3ckey\\r\\nINCR visitor\\r\\nINCR visitor\\r\\nINCR visitor\\r\\n\u0026quot;; sleep 10) | nc localhost 6379 +PONG +OK redis :1 :2 :3 以上实例中我们通过使用 PING 命令查看redis服务是否可用， 之后我们们设置了 w3ckey 的值为 redis，然后我们获取 w3ckey 的值并使得 visitor 自增 3 次。\n在返回的结果中我们可以看到这些命令一次性向 redis 服务提交，并最终一次性读取所有服务端的响应\n 管道技术的优势 管道技术最显著的优势是提高了 redis 服务的性能。\n一些测试数据 在下面的测试中，我们将使用Redis的Ruby客户端，支持管道技术特性，测试管道技术对速度的提升效果。\nrequire 'rubygems' require 'redis' def bench(descr) start = Time.now yield puts \u0026quot;#{descr} #{Time.now-start} seconds\u0026quot; end def without_pipelining r = Redis.new 10000.times { r.ping } end def with_pipelining r = Redis.new r.pipelined { 10000.times { r.ping } } end bench(\u0026quot;without pipelining\u0026quot;) { without_pipelining } bench(\u0026quot;with pipelining\u0026quot;) { with_pipelining } 从处于局域网中的Mac OS X系统上执行上面这个简单脚本的数据表明，开启了管道操作后，往返时延已经被改善得相当低了。\nwithout pipelining 1.185238 seconds with pipelining 0.250783 seconds 如你所见，开启管道后，我们的速度效率提升了5倍。\n"});index.add({'id':12,'href':'/posts/redis/redis-rdb-aof/','title':"Redis 持久化方式RDB和AOF比较",'content':"Redis的所有数据都是保存在内存中，然后不定期的通过异步方式保存到磁盘上(这称为“半持久化模式”)；也可以把每一次数据变化都写入到一个append only file(aof)里面(这称为“全持久化模式”)。\nRDB和AOF工作方式 RDB RDB持久化是指在指定的时间间隔内将内存中的数据集快照写入磁盘，实际操作过程是fork一个子进程，先将数据集写入临时文件，写入成功后，再替换之前的文件，用二进制压缩存储。\nAOF AOF持久化以日志的形式记录服务器所处理的每一个写、删除操作，查询操作不会记录，以文本的方式记录，可以打开文件看到详细的操作记录。\nRDB优缺点 RDB存在哪些优势呢？   一旦采用该方式，那么你的整个Redis数据库将只包含一个文件，这对于文件备份而言是非常完美的。比如，你可能打算每个小时归档一次最近24小时的数 据，同时还要每天归档一次最近30天的数据。通过这样的备份策略，一旦系统出现灾难性故障，我们可以非常容易的进行恢复。\n  对于灾难恢复而言，RDB是非常不错的选择。因为我们可以非常轻松的将一个单独的文件压缩后再转移到其它存储介质上。\n  性能最大化。对于Redis的服务进程而言，在开始持久化时，它唯一需要做的只是fork出子进程，之后再由子进程完成这些持久化的工作，这样就可以极大的避免服务进程执行IO操作了。\n  相比于AOF机制，如果数据集很大，RDB的启动效率会更高。\n  RDB又存在哪些劣势呢？   如果你想保证数据的高可用性，即最大限度的避免数据丢失，那么RDB将不是一个很好的选择。因为系统一旦在定时持久化之前出现宕机现象，此前没有来得及写入磁盘的数据都将丢失。\n  由于RDB是通过fork子进程来协助完成数据持久化工作的，因此，如果当数据集较大时，可能会导致整个服务器停止服务几百毫秒，甚至是1秒钟。\n  AOF优缺点 AOF的优势有哪些呢？   该机制可以带来更高的数据安全性，即数据持久性。Redis中提供了3中同步策略，即每秒同步、每修改同步和不同步。事实上，每秒同步也是异步完成的，其 效率也是非常高的，所差的是一旦系统出现宕机现象，那么这一秒钟之内修改的数据将会丢失。而每修改同步，我们可以将其视为同步持久化，即每次发生的数据变 化都会被立即记录到磁盘中。可以预见，这种方式在效率上是最低的。至于无同步，无需多言，我想大家都能正确的理解它。\n  由于该机制对日志文件的写入操作采用的是append模式，因此在写入过程中即使出现宕机现象，也不会破坏日志文件中已经存在的内容。然而如果我们本次操 作只是写入了一半数据就出现了系统崩溃问题，不用担心，在Redis下一次启动之前，我们可以通过redis-check-aof工具来帮助我们解决数据 一致性的问题。\n  如果日志过大，Redis可以自动启用rewrite机制。即Redis以append模式不断的将修改数据写入到老的磁盘文件中，同时Redis还会创 建一个新的文件用于记录此期间有哪些修改命令被执行。因此在进行rewrite切换时可以更好的保证数据安全性。\n  AOF包含一个格式清晰、易于理解的日志文件用于记录所有的修改操作。事实上，我们也可以通过该文件完成数据的重建。\n  AOF的劣势有哪些呢？   对于相同数量的数据集而言，AOF文件通常要大于RDB文件。RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。\n  根据同步策略的不同，AOF在运行效率上往往会慢于RDB。总之，每秒同步策略的效率是比较高的，同步禁用策略的效率和RDB一样高效。 二者选择的标准，就是看系统是愿意牺牲一些性能，换取更高的缓存一致性（aof），还是愿意写操作频繁的时候，不启用备份来换取更高的性能，待手动运行save的时候，再做备份（rdb）。rdb这个就更有些 eventually consistent的意思了。\n "});index.add({'id':13,'href':'/posts/redis/redis-module/','title':"Redis Module 模块",'content':"todo\n"});index.add({'id':14,'href':'/docs/example/table-of-contents/','title':"Table of Contents",'content':"Ubi loqui Mentem genus facietque salire tempus bracchia Lorem markdownum partu paterno Achillem. Habent amne generosi aderant ad pellem nec erat sustinet merces columque haec et, dixit minus nutrit accipiam subibis subdidit. Temeraria servatum agros qui sed fulva facta. Primum ultima, dedit, suo quisque linguae medentes fixo: tum petis.\nRapit vocant si hunc siste adspice Ora precari Patraeque Neptunia, dixit Danae Cithaeron armaque maxima in nati Coniugis templis fluidove. Effugit usus nec ingreditur agmen ac manus conlato. Nullis vagis nequiquam vultibus aliquos altera suum venis teneas fretum. Armos remotis hoc sine ferrea iuncta quam!\nLocus fuit caecis Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral), northbridge_services_troubleshooting, personal( firmware_rw.trash_rw_crm.device(interactive_gopher_personal, software, -1), megabit, ergonomicsSoftware(cmyk_usb_panel, mips_whitelist_duplex, cpa))); if (5) { managementNetwork += dma - boolean; kilohertz_token = 2; honeypot_affiliate_ergonomics = fiber; } mouseNorthbridge = byte(nybble_xmp_modem.horse_subnet( analogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet), gateway_ospf), repository.domain_key.mouse(serverData(fileNetwork, trim_duplex_file), cellTapeDirect, token_tooltip_mashup( ripcordingMashup))); module_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) + coreLog.joystick(componentUdpLink), windows_expansion_touchscreen); bashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling( ciscNavigationBacklink, table + cleanDriver), indexProtocolIsp);  Placabilis coactis nega ingemuit ignoscat nimia non Frontis turba. Oculi gravis est Delphice; inque praedaque sanguine manu non.\nif (ad_api) { zif += usb.tiffAvatarRate(subnet, digital_rt) + exploitDrive; gigaflops(2 - bluetooth, edi_asp_memory.gopher(queryCursor, laptop), panel_point_firmware); spyware_bash.statePopApplet = express_netbios_digital( insertion_troubleshooting.brouter(recordFolderUs), 65); } recursionCoreRay = -5; if (hub == non) { portBoxVirus = soundWeb(recursive_card(rwTechnologyLeopard), font_radcab, guidCmsScalable + reciprocalMatrixPim); left.bug = screenshot; } else { tooltipOpacity = raw_process_permalink(webcamFontUser, -1); executable_router += tape; } if (tft) { bandwidthWeb *= social_page; } else { regular += 611883; thumbnail /= system_lag_keyboard; }  Caesorum illa tu sentit micat vestes papyriferi Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"});index.add({'id':15,'href':'/docs/example/collapsed/','title':"Collapsed",'content':"Collapsed Level of Menu Cognita laeva illo fracta Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.\n Te at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit  "});index.add({'id':16,'href':'/categories/','title':"Categories",'content':""});index.add({'id':17,'href':'/tags/redis/','title':"redis",'content':""});index.add({'id':18,'href':'/categories/redis/','title':"redis",'content':""});index.add({'id':19,'href':'/posts/redis/','title':"Redis 博客",'content':""});index.add({'id':20,'href':'/tags/','title':"Tags",'content':""});index.add({'id':21,'href':'/categories/web/','title':"web",'content':""});index.add({'id':22,'href':'/','title':"X",'content':"Fence X 后端研发工程师    Do not go gentle into that good night   邮箱\nyagoodidea@gmail.com  网站\nfencex.github.io  个人技能  Web方向\nGo  PHP  Java  MySQL  Redis  高并发  大数据方向\nScala  Spark  Hive  Ambari  Flink  ...    "});index.add({'id':23,'href':'/categories/Blog/','title':"Blog",'content':""});index.add({'id':24,'href':'/categories/develop/','title':"develop",'content':""});index.add({'id':25,'href':'/categories/git/','title':"git",'content':""});index.add({'id':26,'href':'/tags/git/','title':"git",'content':""});index.add({'id':27,'href':'/posts/git/','title':"git 工具",'content':""});index.add({'id':28,'href':'/posts/git/git-refresh-commit-email/','title':"git重刷提交的email和name信息",'content':"场景 公司项目和个人项目不能耦合特别是发布到公开项目的“提交人”信息最好不要和公司一致；\n但，难免忘记配置，需要重新刷；\n推荐的方式是，放弃全局配置，每个项目独立配置 user.name user.email\n步骤 1. 克隆bare项目 纯仓库 git clone --bare https://github.com/user/repo.git cd repo.git 2. 修改信息 #!/bin/sh git filter-branch --env-filter \u0026#39; OLD_EMAIL=\u0026#34;old@email.com\u0026#34; CORRECT_NAME=\u0026#34;new_name\u0026#34; CORRECT_EMAIL=\u0026#34;new@email.com\u0026#34; if [ \u0026#34;$GIT_COMMITTER_EMAIL\u0026#34; = \u0026#34;$OLD_EMAIL\u0026#34; ] then export GIT_COMMITTER_NAME=\u0026#34;$CORRECT_NAME\u0026#34; export GIT_COMMITTER_EMAIL=\u0026#34;$CORRECT_EMAIL\u0026#34; fi if [ \u0026#34;$GIT_AUTHOR_EMAIL\u0026#34; = \u0026#34;$OLD_EMAIL\u0026#34; ] then export GIT_AUTHOR_NAME=\u0026#34;$CORRECT_NAME\u0026#34; export GIT_AUTHOR_EMAIL=\u0026#34;$CORRECT_EMAIL\u0026#34; fi \u0026#39; --tag-name-filter cat -- --branches --tags 3. 修正的任务推送到远程 git push --force --tags origin \u0026#39;refs/heads/*\u0026#39; 4. 清理多余文件 cd .. rm -rf repo.git "});index.add({'id':29,'href':'/categories/Hugo/','title':"Hugo",'content':""});index.add({'id':30,'href':'/tags/hugo/','title':"hugo",'content':""});index.add({'id':31,'href':'/posts/hugo-start/','title':"hugo最棒的blog主题",'content':"Hugo 测试了这么多主题，book真的非常非常趁手。\n特点  支持搜索 自定义菜单 支持TOC 支持分类和标签 支持按钮|tab|分栏等样式 支持HTML代码  "});index.add({'id':32,'href':'/posts/','title':"随笔",'content':""});index.add({'id':33,'href':'/tags/golang/','title':"golang",'content':""});index.add({'id':34,'href':'/categories/golang/','title':"golang",'content':""});index.add({'id':35,'href':'/posts/cheatsheet/golang/','title':"Golang cheat-sheet",'content':""});index.add({'id':36,'href':'/tags/mysql/','title':"mysql",'content':""});index.add({'id':37,'href':'/categories/mysql/','title':"mysql",'content':""});index.add({'id':38,'href':'/posts/mysql/','title':"Mysql 博客",'content':""});index.add({'id':39,'href':'/docs/example/collapsed/3rd-level/4th-level/','title':"4th Level",'content':"2344th Level of Menu Caesorum illa tu sentit micat vestes papyriferi Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"});index.add({'id':40,'href':'/docs/example/collapsed/3rd-level/','title':"3rd Level",'content':"3rd Level of Menu Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral), northbridge_services_troubleshooting, personal( firmware_rw.trash_rw_crm.device(interactive_gopher_personal, software, -1), megabit, ergonomicsSoftware(cmyk_usb_panel, mips_whitelist_duplex, cpa))); if (5) { managementNetwork += dma - boolean; kilohertz_token = 2; honeypot_affiliate_ergonomics = fiber; } mouseNorthbridge = byte(nybble_xmp_modem.horse_subnet( analogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet), gateway_ospf), repository.domain_key.mouse(serverData(fileNetwork, trim_duplex_file), cellTapeDirect, token_tooltip_mashup( ripcordingMashup))); module_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) + coreLog.joystick(componentUdpLink), windows_expansion_touchscreen); bashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling( ciscNavigationBacklink, table + cleanDriver), indexProtocolIsp);  "});index.add({'id':41,'href':'/docs/example/hidden/','title':"Hidden",'content':"This page is hidden in menu Quondam non pater est dignior ille Eurotas Latent te facies Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\n Pater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor  Cum honorum Latona O fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer), pad.property_data_programming.sectorBrowserPpga(dataMask, 37, recycleRup)); intellectualVaporwareUser += -5 * 4; traceroute_key_upnp /= lag_optical(android.smb(thyristorTftp)); surge_host_golden = mca_compact_device(dual_dpi_opengl, 33, commerce_add_ppc); if (lun_ipv) { verticalExtranet(1, thumbnail_ttl, 3); bar_graphics_jpeg(chipset - sector_xmp_beta); }  Fronde cetera dextrae sequens pennis voce muneris Acta cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software; if (internic \u0026gt; disk) { emoticonLockCron += 37 + bps - 4; wan_ansi_honeypot.cardGigaflops = artificialStorageCgi; simplex -= downloadAccess; } var volumeHardeningAndroid = pixel + tftp + onProcessorUnmount; sector(memory(firewire + interlaced, wired)); "});index.add({'id':42,'href':'/docs/shortcodes/','title':"Shortcodes",'content':""});index.add({'id':43,'href':'/docs/shortcodes/buttons/','title':"Buttons",'content':"Buttons Buttons are styled links that can lead to local page or external link.\nExample {{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}}  Get Home  Contribute  "});index.add({'id':44,'href':'/docs/shortcodes/columns/','title':"Columns",'content':"Columns Columns help organize shorter pieces of content horizontally for readability.\n{{\u0026lt; columns \u0026gt;}} \u0026lt;!--begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!--magic sparator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!--magic sparator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{\u0026lt; /columns \u0026gt;}} Example Left Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.  Mid Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!  Right Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.   "});index.add({'id':45,'href':'/docs/shortcodes/expand/','title':"Expand",'content':"Expand Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.\nExample Default {{\u0026lt; expand \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}}  Expand ↕  Markdown content Lorem markdownum insigne\u0026hellip;    With Custom Label {{\u0026lt; expand \u0026#34;Custom Label\u0026#34; \u0026#34;...\u0026#34; \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}}  Custom Label ...  Markdown content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.    "});index.add({'id':46,'href':'/docs/shortcodes/hints/','title':"Hints",'content':"Hints Hint shortcode can be used as hint/alerts/notification block.\nThere are 3 colors to choose: info, warning and danger.\n{{\u0026lt; hint [info|warning|danger] \u0026gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{\u0026lt; /hint \u0026gt;}} Example Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  "});index.add({'id':47,'href':'/docs/shortcodes/katex/','title':"Katex",'content':"KaTeX KaTeX shortcode let you render math typesetting in markdown document. See KaTeX\nExample {{\u0026lt; katex [display] [class=\u0026#34;text-center\u0026#34;] \u0026gt;}} x = \\begin{cases} a \u0026amp;\\text{if } b \\\\ c \u0026amp;\\text{if } d \\end{cases} {{\u0026lt; /katex \u0026gt;}}     \\( x = \\begin{cases} a \u0026\\text{if } b \\\\ c \u0026\\text{if } d \\end{cases} \\)    Display Mode Example Here is some inline example: \\(\\pi(x)\\)  , rendered in the same line. And below is display example, having display: block \\[ x = \\begin{cases} a \u0026\\text{if } b \\\\ c \u0026\\text{if } d \\end{cases} \\]  Text continues here.\n"});index.add({'id':48,'href':'/docs/shortcodes/mermaid/','title':"Mermaid",'content':"Mermaid Chart Mermaid is library for generating svg charts and diagrams from text.\nExample {{\u0026lt; mermaid [class=\u0026#34;text-center\u0026#34;]\u0026gt;}} sequenceDiagram Alice-\u0026gt;\u0026gt;Bob: Hello Bob, how are you? alt is sick Bob-\u0026gt;\u0026gt;Alice: Not so good :( else is well Bob-\u0026gt;\u0026gt;Alice: Feeling fresh like a daisy end opt Extra response Bob-\u0026gt;\u0026gt;Alice: Thanks for asking end {{\u0026lt; /mermaid \u0026gt;}}    sequenceDiagram Alice-Bob: Hello Bob, how are you? alt is sick Bob-Alice: Not so good :( else is well Bob-Alice: Feeling fresh like a daisy end opt Extra response Bob-Alice: Thanks for asking end   "});index.add({'id':49,'href':'/docs/shortcodes/tabs/','title':"Tabs",'content':"Tabs32 Tabs let you organize content by context, for example installation instructions for each supported platform.\n{{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}} {{\u0026lt; tab \u0026#34;MacOS\u0026#34; \u0026gt;}} # MacOS Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabs \u0026gt;}} Example MacOS  MacOS This is tab MacOS content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n Linux  Linux This is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n Windows  Windows This is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n  "});index.add({'id':50,'href':'/docs/','title':"Docs",'content':""});index.add({'id':51,'href':'/posts/about-me-develop/','title':"个人简历-WEB开发",'content':"谢志新 - 资深后端研发工程师      基本信息  姓名：谢志新\n出生年月: 1990.05\n学历: 大学本科\n电话：175-212-56756\n邮箱：yagoodidea@gmail.com\n住址: 上海·浦东  教育经历  2009.09 - 2013.06\n南昌航空大学 - 电子信息工程(统招二类本科)\n工作经历  2345.COM - 上海二三四五网络 2016.4 - 至今\n php - 用户账号体系（亿万）和支付体系前后台开发 react native - 上线 3 个react native app，月流水数千万 golang/vue - 公司合作医疗科研项目 ecrf 独立设计研发从0到1 大数据 - 公司广告平台数据分析和报表开发，Spark Streaming 实时etl，实时报表开发，数仓建模，大数据平台 Ambari 运维.  S·P·D - 北京速派得货运 2014.8 - 2016.4\n php - O2O货运web管理系统和客户端 RESTful Api 设计开发 简单运维能力  7K7K.COM - 北京奇客创想 2013.7 - 2014.8\n php 入行    个人技能  Web\nGo  PHP  Java  MySQL  Redis  FE   大数据\nScala  Spark  Hive  Ambari  Flink  ...    英语四级  项目经历  实时运算控量 0 - 1 实时运算控量\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!\nSPD Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!\n2015 - 2016\n7k7k.com 2013 - 2014\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!\n"});index.add({'id':52,'href':'/posts/about-me/','title':"关于我",'content':"Fence X 后端研发工程师       邮箱\nyagoodidea@gmail.com  网站\nfencex.github.io  个人技能  Web方向\nGo  PHP  Java  MySQL  Redis  高并发  大数据方向\nScala  Spark  Hive  Ambari  Flink  ...    "});})();